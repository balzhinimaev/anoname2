import { io, Socket } from 'socket.io-client';
import { ClientToServerEvents, ServerToClientEvents } from '../websocket/types';
import jwt from 'jsonwebtoken';
import config from '../config';
import mongoose from 'mongoose';
import User from '../models/User';
import Chat from '../models/Chat';

class WebSocketTester {
  private socket: Socket<ServerToClientEvents, ClientToServerEvents>;
  private token: string;
  private userId: string;
  private testChatId: string = '';
  private testUserId2: string = '';

  constructor() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO –∫–ª–∏–µ–Ω—Ç–∞...');
    this.socket = io('http://localhost:3001', {
      transports: ['websocket'],
      autoConnect: false,
      timeout: 5000,
      reconnection: true,
      reconnectionAttempts: 3
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞
    this.socket.on('connect_error', (error: any) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        type: error.type,
        description: error.description,
        context: error.context
      });
    });

    this.socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.log('ID —Å–æ–∫–µ—Ç–∞:', this.socket.id);
    });

    this.socket.on('disconnect', (reason) => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
    });

    this.socket.on('error', (error) => {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    });

    this.socket.on('search:status', (data) => {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:', data.status);
    });

    this.socket.on('search:matched', (data) => {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:', data.matchedUser);
      this.testChatId = data.matchedUser.chatId;
    });

    this.socket.on('chat:message', (data) => {
      console.log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
    });

    this.socket.on('chat:typing', (data) => {
      console.log('‚úÖ –ü–µ—á–∞—Ç–∞–µ—Ç:', data);
    });

    this.socket.on('chat:read', (data) => {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:', data);
    });
  }

  async connect(method: 'auth' | 'header' | 'bearer' = 'auth') {
    try {
      console.log(`\nüîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${method}...`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
      await mongoose.connect(config.mongoUri, { dbName: "anoname" });
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

      console.log('üîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      let user = await User.findOne({ telegramId: 127227574 }) as any;
      
      if (!user) {
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        user = await User.create({
          telegramId: 127227574,
          username: "testuser",
          firstName: "Test",
          lastName: "User",
          gender: "male",
          age: 25,
          isActive: true,
          preferences: {
            gender: "any",
            ageRange: { min: 18, max: 50 }
          }
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω');
      }

      this.userId = user._id.toString();
      this.token = jwt.sign({ userId: this.userId }, config.jwtSecret, { expiresIn: '30d' });
      console.log('üîë –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', this.token.substring(0, 20) + '...');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const socketOptions: any = {
        transports: ['websocket'],
        timeout: 5000,
        reconnection: true,
        reconnectionAttempts: 3,
        forceNew: true
      };

      switch (method) {
        case 'auth':
          socketOptions.auth = { token: this.token };
          break;
        case 'header':
          socketOptions.extraHeaders = { token: this.token };
          break;
        case 'bearer':
          socketOptions.extraHeaders = { Authorization: `Bearer ${this.token}` };
          break;
      }

      console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Socket.IO:', JSON.stringify(socketOptions, null, 2));
      this.socket = io('http://localhost:3001', socketOptions);

      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      console.log('üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
      this.socket.connect();
      
      return new Promise<void>((resolve) => {
        const timeout = setTimeout(() => {
          console.log('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
          resolve();
        }, 5000);

        this.socket.on('connect', () => {
          clearTimeout(timeout);
          resolve();
        });
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      throw error;
    }
  }

  private setupEventHandlers() {
    this.socket.on('connect', () => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É'));
    this.socket.on('connect_error', (error) => console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message));
    this.socket.on('disconnect', (reason) => console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason));
    this.socket.on('error', (error) => console.log('‚ùå –û—à–∏–±–∫–∞:', error.message));
    this.socket.on('search:status', (data) => console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:', data.status));
    this.socket.on('search:matched', (data) => {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:', data.matchedUser);
      this.testChatId = data.matchedUser.chatId;
    });
    this.socket.on('chat:message', (data) => console.log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data));
    this.socket.on('chat:typing', (data) => console.log('‚úÖ –ü–µ—á–∞—Ç–∞–µ—Ç:', data));
    this.socket.on('chat:read', (data) => console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:', data));
  }

  async testSearch() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
    
    this.socket.emit('search:start', {
      criteria: {
        gender: 'male',
        age: 25,
        rating: 0,
        desiredGender: ['any'],
        desiredAgeMin: 18,
        desiredAgeMax: 50,
        useGeolocation: false
      }
    });

    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    this.socket.emit('search:cancel');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω');
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  private async createTestChat() {
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user2 = await User.findOne({ telegramId: 127227575 }) as any;
    
    if (!user2) {
      console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      user2 = await User.create({
        telegramId: 127227575,
        username: "testuser2",
        firstName: "Test2",
        lastName: "User2",
        gender: "female",
        age: 25,
        isActive: true,
        preferences: {
          gender: "any",
          ageRange: { min: 18, max: 50 }
        }
      });
      console.log('‚úÖ –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω');
    }

    this.testUserId2 = user2._id.toString();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
    const chat = await Chat.create({
      participants: [this.userId, this.testUserId2],
      type: 'anonymous',
      messages: []
    });

    this.testChatId = chat._id.toString();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', this.testChatId);
  }

  async testChat() {
    if (!this.testChatId) {
      console.log('üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
      await this.createTestChat();
    }

    console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞...');
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
    this.socket.emit('chat:join', this.testChatId);
    console.log('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É:', this.testChatId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    this.socket.emit('chat:typing', this.testChatId);
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.socket.emit('chat:message', {
      chatId: this.testChatId,
      content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    });
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    this.socket.emit('chat:read', {
      chatId: this.testChatId,
      timestamp: new Date()
    });
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç
    this.socket.emit('chat:leave', this.testChatId);
    console.log('‚úÖ –ü–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç');
  }

  async testErrorHandling() {
    console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');

    // –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID —á–∞—Ç–∞
    this.socket.emit('chat:join', 'invalid_chat_id');
    this.socket.emit('chat:message', {
      chatId: 'invalid_chat_id',
      content: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });

    // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.socket.emit('search:start', {
      criteria: {
        invalid: 'data'
      }
    } as any);
  }

  async disconnect() {
    if (this.socket.connected) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
      this.socket.disconnect();
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  static async runTests() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket...\n');
    
    const tester = new WebSocketTester();

    try {
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ auth
      console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ auth...');
      await tester.connect('auth');
      await new Promise(resolve => setTimeout(resolve, 2000));
      await tester.disconnect();

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ header
      console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ header...');
      await tester.connect('header');
      await new Promise(resolve => setTimeout(resolve, 2000));
      await tester.disconnect();

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ bearer
      console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ bearer...');
      await tester.connect('bearer');
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      await tester.testSearch();
      await tester.testChat();
      await tester.testErrorHandling();

      await tester.disconnect();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
      await mongoose.disconnect();
      process.exit(0);
    }
  }
}

WebSocketTester.runTests(); 