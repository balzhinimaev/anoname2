import Search, { ISearch } from '../models/Search';
import Chat from '../models/Chat';
import { wsManager } from '../server';
import mongoose from 'mongoose';
import { wsLogger } from '../utils/logger';
import User from '../models/User';

export interface SearchCriteria {
  gender: 'male' | 'female';
  age: number;
  rating?: number;
  desiredGender: ('male' | 'female' | 'any')[];
  desiredAgeMin: number;
  desiredAgeMax: number;
  minAcceptableRating?: number;
  useGeolocation: boolean;
  location?: {
    longitude: number;
    latitude: number;
  };
  maxDistance?: number;
}

export interface SearchResult {
  status: 'searching' | 'matched' | 'cancelled' | 'expired';
  userId: mongoose.Types.ObjectId;
  telegramId: string;
  matchedWith?: {
    userId: mongoose.Types.ObjectId;
    telegramId: string;
    chatId: mongoose.Types.ObjectId;
  };
}

export class SearchService {
  private static statsCache: {
    data: any;
    timestamp: number;
  } | null = null;
  private static readonly CACHE_TTL = 5000; // 5 —Å–µ–∫—É–Ω–¥

  static async startSearch(
    userId: string,
    telegramId: string,
    criteria: SearchCriteria
  ): Promise<SearchResult> {
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    wsLogger.info('search_service_start', '–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ', {
      userId,
      telegramId,
      criteria: {
        gender: criteria.gender,
        age: criteria.age,
        desiredGender: criteria.desiredGender,
        desiredAgeMin: criteria.desiredAgeMin,
        desiredAgeMax: criteria.desiredAgeMax,
        useGeolocation: criteria.useGeolocation,
        hasLocation: !!criteria.location,
        location: criteria.location ? {
          longitude: criteria.location.longitude,
          latitude: criteria.location.latitude
        } : null,
        maxDistance: criteria.maxDistance
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç SEARCH START REQUEST:', {
      userId,
      telegramId,
      useGeolocation: criteria.useGeolocation,
      location: criteria.location,
      maxDistance: criteria.maxDistance
    });

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    await Search.findOneAndUpdate(
      { userId, status: 'searching' },
      { status: 'cancelled' }
    );

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const searchData: any = {
      userId: new mongoose.Types.ObjectId(userId),
      telegramId,
      status: 'searching',
      gender: criteria.gender,
      age: criteria.age,
      rating: criteria.rating ?? 0,
      desiredGender: criteria.desiredGender,
      desiredAgeMin: criteria.desiredAgeMin,
      desiredAgeMax: criteria.desiredAgeMax,
      minAcceptableRating: criteria.minAcceptableRating ?? -1,
      useGeolocation: criteria.useGeolocation,
      // maxDistance —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
      maxDistance: criteria.useGeolocation ? (criteria.maxDistance || 10) : undefined
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if (criteria.useGeolocation && criteria.location) {
      searchData.location = {
        type: 'Point',
        coordinates: [criteria.location.longitude, criteria.location.latitude]
      };
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    const search = await Search.create(searchData);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–∏—Å–∫–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
    wsLogger.info('search_record_created', '–ó–∞–ø–∏—Å—å –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', {
      userId,
      searchId: search._id?.toString(),
      useGeolocation: search.useGeolocation,
      hasLocation: !!search.location,
      coordinates: search.location ? search.location.coordinates : null,
      maxDistance: search.maxDistance
    });
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º—ç—Ç—á
    const matches = await this.findMatches(search);
    if (matches.length > 0) {
      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –º—ç—Ç—á
      const bestMatch = this.selectBestMatch(search, matches);
      if (search._id && bestMatch._id) {
        await this.createMatch(
          search as ISearch & { _id: mongoose.Types.ObjectId },
          bestMatch as ISearch & { _id: mongoose.Types.ObjectId }
        );
      }
    }

    // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
    await this.updateAndBroadcastStats('start', userId);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ SearchResult
    return {
      status: search.status as 'searching' | 'matched' | 'cancelled' | 'expired',
      userId: search.userId,
      telegramId: search.telegramId,
      matchedWith: search.matchedWith ? {
        userId: search.matchedWith.userId,
        telegramId: search.matchedWith.telegramId,
        chatId: search.matchedWith.chatId as mongoose.Types.ObjectId
      } : undefined
    };
  }

  static async cancelSearch(userId: string) {
    const search = await Search.findOneAndUpdate(
      { userId, status: 'searching' },
      { status: 'cancelled' },
      { new: true }
    );

    // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
    await this.updateAndBroadcastStats('cancel', userId);

    return search;
  }

  private static async findMatches(search: ISearch): Promise<ISearch[]> {
    // –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    const matchCriteria: any = {
      status: 'searching',
      userId: { $ne: search.userId },
    };

    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
    let gendersToMatch: ('male' | 'female')[] = [];
    if (search.desiredGender.includes('any')) {
      gendersToMatch = ['male', 'female'];
    } else {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º 'any', –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∑–∞–ª—Å—è,
      // –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É.
      gendersToMatch = search.desiredGender.filter(g => g === 'male' || g === 'female') as ('male' | 'female')[];
    }
    matchCriteria.gender = { $in: gendersToMatch };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –ø–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∂–µ–ª–∞–µ–º–æ–º—É –ø–æ–ª—É –¥—Ä—É–≥–∏—Ö
    matchCriteria.desiredGender = {
      $in: [search.gender, 'any']
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)
    matchCriteria.age = { 
      $gte: search.desiredAgeMin,
      $lte: search.desiredAgeMax
    };
    matchCriteria.desiredAgeMin = { $lte: search.age };
    matchCriteria.desiredAgeMax = { $gte: search.age };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (search.minAcceptableRating > -1) {
      matchCriteria.rating = { $gte: search.minAcceptableRating };
    }

    // –ï—Å–ª–∏ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –µ–µ –≤ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –ø–æ–∏—Å–∫–∞
    if (!search.useGeolocation) {
      // –õ–∏–±–æ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ª–∏–±–æ –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
      matchCriteria.$or = [
        { useGeolocation: false },
        { useGeolocation: true }
      ];
    }
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
    else if (search.useGeolocation && search.location) {
      matchCriteria.useGeolocation = true;
      matchCriteria.location = {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: search.location.coordinates
          },
          $maxDistance: (search.maxDistance || 10) * 1000 // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–º –≤ –º–µ—Ç—Ä—ã
        }
      };
    }

    return await Search.find(matchCriteria);
  }

  private static selectBestMatch(search: ISearch, matches: ISearch[]): ISearch {
    try {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      if (!matches || matches.length === 0) {
        wsLogger.info('select_best_match', '–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –º–∞—Ç—á –∏–∑ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞', {
          searchId: search._id?.toString()
        });
        throw new Error('No matches available for selection');
      }

      return matches.reduce((best, current) => {
        try {
          const bestScore = this.calculateMatchScore(search, best);
          const currentScore = this.calculateMatchScore(search, current);
          return currentScore > bestScore ? current : best;
        } catch (error) {
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ç—á
          wsLogger.warn('match_score_calc', (error as Error).message, {
            searchId: search._id?.toString(),
            bestId: best._id?.toString(),
            currentId: current._id?.toString()
          });
          return best;
        }
      }, matches[0]);
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      wsLogger.warn('select_best_match', (error as Error).message, {
        searchId: search._id?.toString()
      });
      return matches[0];
    }
  }

  private static calculateMatchScore(search: ISearch, match: ISearch): number {
    try {
      let score = 0;

      // –ë–ª–∏–∑–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ (–º–∞–∫—Å–∏–º—É–º 40 –±–∞–ª–ª–æ–≤)
      const searchRating = typeof search.rating === 'number' ? search.rating : 0;
      const matchRating = typeof match.rating === 'number' ? match.rating : 0;
      const ratingDiff = Math.abs(searchRating - matchRating);
      score += Math.max(0, 40 - ratingDiff * 2);

      // –ë–ª–∏–∑–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤)
      const searchAge = typeof search.age === 'number' ? search.age : 25;
      const matchAge = typeof match.age === 'number' ? match.age : 25;
      const ageDiff = Math.abs(searchAge - matchAge);
      score += Math.max(0, 30 - ageDiff * 2);

      // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–º–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤)
      if (search.useGeolocation && match.useGeolocation && 
          search.location && match.location && 
          search.location.coordinates && match.location.coordinates &&
          search.location.coordinates.length >= 2 && match.location.coordinates.length >= 2) {
        try {
          const distance = this.calculateDistance(
            search.location.coordinates as [number, number],
            match.location.coordinates as [number, number]
          );
          score += Math.max(0, 30 - (distance / 1000)); // distance –≤ –∫–º
        } catch (error) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –±–∞–ª–ª—ã
          wsLogger.warn('distance_calc', (error as Error).message, {
            matchId: match._id?.toString()
          });
        }
      }

      return score;
    } catch (error) {
      wsLogger.warn('match_score', (error as Error).message, {
        searchId: search._id?.toString(),
        matchId: match._id?.toString()
      });
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
      return 50; // –±–∞–∑–æ–≤—ã–π —Å—á–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  private static calculateDistance(coord1: [number, number], coord2: [number, number]): number {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (!coord1 || !coord2 || coord1.length < 2 || coord2.length < 2 ||
          typeof coord1[0] !== 'number' || typeof coord1[1] !== 'number' ||
          typeof coord2[0] !== 'number' || typeof coord2[1] !== 'number' ||
          isNaN(coord1[0]) || isNaN(coord1[1]) || isNaN(coord2[0]) || isNaN(coord2[1])) {
        throw new Error('Invalid coordinates for distance calculation');
      }

      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª—ã –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
      const R = 6371e3; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
      const œÜ1 = (coord1[1] * Math.PI) / 180;
      const œÜ2 = (coord2[1] * Math.PI) / 180;
      const ŒîœÜ = ((coord2[1] - coord1[1]) * Math.PI) / 180;
      const ŒîŒª = ((coord2[0] - coord1[0]) * Math.PI) / 180;

      const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                Math.cos(œÜ1) * Math.cos(œÜ2) *
                Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
      
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(Math.max(0, 1-a))); // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

      return R * c; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
    } catch (error) {
      wsLogger.warn('distance_calculation', (error as Error).message, {
        coord1: JSON.stringify(coord1),
        coord2: JSON.stringify(coord2)
      });
      return 10000; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 10–∫–º –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  private static async createMatch(search1: ISearch & { _id: mongoose.Types.ObjectId }, search2: ISearch & { _id: mongoose.Types.ObjectId }) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —á–∞—Ç–∞
      if (!search1.userId || !search2.userId || !search1.telegramId || !search2.telegramId) {
        throw new Error('Invalid search data for match creation');
      }

      // –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
      const chat = await Chat.create({
        // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤ ObjectId
        participants: [
          search1.userId,
          search2.userId
        ],
        messages: [],
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        type: 'anonymous',
        isActive: true,
        startedAt: new Date()
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∏–º–µ–µ—Ç _id
      if (!chat || !chat._id) {
        throw new Error('Failed to create chat for match');
      }

      wsLogger.info('match_created', '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á', {
        chatId: chat._id.toString(),
        search1Id: search1._id.toString(),
        search2Id: search2._id.toString(),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö –ø–æ–∏—Å–∫–æ–≤
      await Promise.all([
        Search.findByIdAndUpdate(search1._id, {
          status: 'matched',
          matchedWith: {
            userId: search2.userId,
            telegramId: search2.telegramId,
            chatId: chat._id
          }
        }),
        Search.findByIdAndUpdate(search2._id, {
          status: 'matched',
          matchedWith: {
            userId: search1.userId,
            telegramId: search1.telegramId,
            chatId: chat._id
          }
        })
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      wsManager.sendToUser(search1.userId.toString(), 'search:matched', {
        matchedUser: {
          telegramId: search2.telegramId,
          gender: search2.gender,
          age: search2.age,
          chatId: chat._id.toString()
        }
      });

      wsManager.sendToUser(search2.userId.toString(), 'search:matched', {
        matchedUser: {
          telegramId: search1.telegramId,
          gender: search1.gender,
          age: search1.age,
          chatId: chat._id.toString()
        }
      });

      // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –º—ç—Ç—á–∞
      await this.updateAndBroadcastStats('match', search1.userId.toString());

      return chat;
    } catch (error) {
      wsLogger.warn('create_match', (error as Error).message, {
        search1Id: search1._id.toString(),
        search2Id: search2._id.toString(),
        stack: (error as Error).stack
      });
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ searching
        await Promise.all([
          Search.findByIdAndUpdate(search1._id, { status: 'searching', $unset: { matchedWith: 1 } }),
          Search.findByIdAndUpdate(search2._id, { status: 'searching', $unset: { matchedWith: 1 } })
        ]);
      } catch (rollbackError) {
        wsLogger.warn('match_rollback', (rollbackError as Error).message, {
          search1Id: search1._id.toString(),
          search2Id: search2._id.toString()
        });
      }
      
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
  }

  static async getSearchStats() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.statsCache && Date.now() - this.statsCache.timestamp < this.CACHE_TTL) {
      return this.statsCache.data;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
    const [totalSearching, maleSearching, femaleSearching] = await Promise.all([
      Search.countDocuments({ status: 'searching' }),
      Search.countDocuments({ status: 'searching', gender: 'male' }),
      Search.countDocuments({ status: 'searching', gender: 'female' })
    ]);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—É–º–º–∏—Ä—É–µ–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const [onlineUsers, totalOnlineFromDB] = await Promise.all([
      User.find({ isActive: true }).select('gender'),
      User.countDocuments({ isActive: true })
    ]);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω –æ–Ω–ª–∞–π–Ω
    let maleOnline = 0;
    let femaleOnline = 0;
    onlineUsers.forEach(user => {
      if (user.gender === 'male') maleOnline++;
      else if (user.gender === 'female') femaleOnline++;
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ –∏ –º—ç—Ç—á–∞–º –∑–∞ 24 —á–∞—Å–∞
    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);

    const matches24h = await Search.countDocuments({
      status: 'matched',
      updatedAt: { $gte: oneDayAgo }
    });

    // –°–æ–±–∏—Ä–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      t: totalSearching,
      m: maleSearching,
      f: femaleSearching,
      online: {
        t: totalOnlineFromDB,
        m: maleOnline,
        f: femaleOnline
      },
      avgSearchTime: {
        t: 0, // –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∂–µ
        m: 0,
        f: 0,
        matches24h
      }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    this.statsCache = {
      data: stats,
      timestamp: Date.now()
    };

    return stats;
  }

  static async getUserActiveSearch(userId: string) {
    return await Search.findOne({
      userId,
      status: 'searching'
    });
  }

  public static async broadcastSearchStats() {
    try {
      const stats = await this.getSearchStats();
      wsManager.io.to('search_stats_room').emit('search:stats', stats);
      return stats; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º stats –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É Promise<any>
    } catch (error) {
      console.error('Failed to broadcast search stats:', error);
      return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  }

  private static async updateAndBroadcastStats(action: 'start' | 'cancel' | 'match', userId: string) {
    // –í—ã–Ω–µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
    try {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ—â–µ –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
      if (this.updatingStats) {
        this.pendingUpdates = true;
        return;
      }

      this.updatingStats = true;

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫—ç—à –∏ –æ–Ω —Å–≤–µ–∂–∏–π, —Ç–æ –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
      if (this.statsCache && Date.now() - this.statsCache.timestamp < this.CACHE_TTL) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const user = await Search.findOne({ userId });
        const gender = user?.gender;

        if (gender) {
          // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          wsLogger.info('stats_incremental_update', '–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (' + action + ' –ø–æ–∏—Å–∫–∞)', {
            gender,
            userId
          });

          // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
          if (action === 'start') {
            this.statsCache.data.t++;
            if (gender === 'male') this.statsCache.data.m++;
            else if (gender === 'female') this.statsCache.data.f++;
          } else if (action === 'cancel') {
            this.statsCache.data.t = Math.max(0, this.statsCache.data.t - 1);
            if (gender === 'male') this.statsCache.data.m = Math.max(0, this.statsCache.data.m - 1);
            else if (gender === 'female') this.statsCache.data.f = Math.max(0, this.statsCache.data.f - 1);
          } else if (action === 'match') {
            // –ü—Ä–∏ –º—ç—Ç—á–µ –¥–≤–æ–µ –ø–æ–∫–∏–¥–∞—é—Ç –ø–æ–∏—Å–∫
            this.statsCache.data.t = Math.max(0, this.statsCache.data.t - 2);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –º—ç—Ç—á–µ–π
            this.statsCache.data.avgSearchTime.matches24h++;
            
            // –ú—ã –Ω–µ –∑–Ω–∞–µ–º –ø–æ–ª –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å–æ–∫—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            // –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if (gender === 'male') this.statsCache.data.m = Math.max(0, this.statsCache.data.m - 1);
            else if (gender === 'female') this.statsCache.data.f = Math.max(0, this.statsCache.data.f - 1);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫—ç—à–∞
          this.statsCache.timestamp = Date.now();
        }
      } else {
        // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.getSearchStats();
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
      wsLogger.info('stats_force_update', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è: ' + action, {
        userId,
        stats: this.statsCache?.data,
        fromCache: !!this.statsCache
      });
      await this.broadcastSearchStats();

      this.updatingStats = false;

      // –ï—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—â–µ –æ–¥–Ω–æ
      if (this.pendingUpdates) {
        this.pendingUpdates = false;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
        setTimeout(() => this.broadcastSearchStats(), 0);
      }
    } catch (error) {
      this.updatingStats = false;
      console.error('Failed to update and broadcast stats:', error);
      throw error;
    }
  }

  private static updatingStats = false;
  private static pendingUpdates = false;
} 