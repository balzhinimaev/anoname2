import Search, { ISearch } from '../models/Search';
import Chat from '../models/Chat';
import { wsManager } from '../server';
import mongoose from 'mongoose';
import { wsLogger } from '../utils/logger';
import User from '../models/User';

export interface SearchCriteria {
  gender: 'male' | 'female';
  age: number;
  rating?: number;
  desiredGender: ('male' | 'female' | 'any')[];
  desiredAgeMin: number;
  desiredAgeMax: number;
  minAcceptableRating?: number;
  useGeolocation: boolean;
  location?: {
    longitude: number;
    latitude: number;
  };
  maxDistance?: number;
}

export interface SearchResult {
  status: 'searching' | 'matched' | 'cancelled' | 'expired';
  userId: mongoose.Types.ObjectId;
  telegramId: string;
  matchedWith?: {
    userId: mongoose.Types.ObjectId;
    telegramId: string;
    chatId: mongoose.Types.ObjectId;
  };
}

export class SearchService {
  private static debounceTimeout: NodeJS.Timeout | null = null;
  private static readonly DEBOUNCE_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
  private static statsCache: {
    data: any;
    timestamp: number;
  } | null = null;
  private static readonly CACHE_TTL = 5000; // 5 —Å–µ–∫—É–Ω–¥

  static async startSearch(
    userId: string,
    telegramId: string,
    criteria: SearchCriteria
  ): Promise<SearchResult> {
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    wsLogger.info('search_service_start', '–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ', {
      userId,
      telegramId,
      criteria: {
        gender: criteria.gender,
        age: criteria.age,
        desiredGender: criteria.desiredGender,
        desiredAgeMin: criteria.desiredAgeMin,
        desiredAgeMax: criteria.desiredAgeMax,
        useGeolocation: criteria.useGeolocation,
        hasLocation: !!criteria.location,
        location: criteria.location ? {
          longitude: criteria.location.longitude,
          latitude: criteria.location.latitude
        } : null,
        maxDistance: criteria.maxDistance
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç SEARCH START REQUEST:', {
      userId,
      telegramId,
      useGeolocation: criteria.useGeolocation,
      location: criteria.location,
      maxDistance: criteria.maxDistance
    });

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    await Search.findOneAndUpdate(
      { userId, status: 'searching' },
      { status: 'cancelled' }
    );

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    const search = await Search.create({
      userId: new mongoose.Types.ObjectId(userId),
      telegramId,
      status: 'searching',
      gender: criteria.gender,
      age: criteria.age,
      rating: criteria.rating ?? 0,
      desiredGender: criteria.desiredGender,
      desiredAgeMin: criteria.desiredAgeMin,
      desiredAgeMax: criteria.desiredAgeMax,
      minAcceptableRating: criteria.minAcceptableRating ?? -1,
      useGeolocation: criteria.useGeolocation,
      location: criteria.location ? {
        type: 'Point',
        coordinates: [criteria.location.longitude, criteria.location.latitude]
      } : undefined,
      maxDistance: criteria.maxDistance
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–∏—Å–∫–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
    wsLogger.info('search_record_created', '–ó–∞–ø–∏—Å—å –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', {
      userId,
      searchId: search._id?.toString(),
      useGeolocation: search.useGeolocation,
      hasLocation: !!search.location,
      coordinates: search.location ? search.location.coordinates : null,
      maxDistance: search.maxDistance
    });
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º—ç—Ç—á
    const matches = await this.findMatches(search);
    if (matches.length > 0) {
      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –º—ç—Ç—á
      const bestMatch = this.selectBestMatch(search, matches);
      if (search._id && bestMatch._id) {
        await this.createMatch(
          search as ISearch & { _id: mongoose.Types.ObjectId },
          bestMatch as ISearch & { _id: mongoose.Types.ObjectId }
        );
      }
    }

    // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
    await this.updateAndBroadcastStats('start', userId);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ SearchResult
    return {
      status: search.status as 'searching' | 'matched' | 'cancelled' | 'expired',
      userId: search.userId,
      telegramId: search.telegramId,
      matchedWith: search.matchedWith ? {
        userId: search.matchedWith.userId,
        telegramId: search.matchedWith.telegramId,
        chatId: search.matchedWith.chatId as mongoose.Types.ObjectId
      } : undefined
    };
  }

  static async cancelSearch(userId: string) {
    const search = await Search.findOneAndUpdate(
      { userId, status: 'searching' },
      { status: 'cancelled' },
      { new: true }
    );

    // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
    await this.updateAndBroadcastStats('cancel', userId);

    return search;
  }

  private static async findMatches(search: ISearch): Promise<ISearch[]> {
    // –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    const matchCriteria: any = {
      status: 'searching',
      userId: { $ne: search.userId },
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∂–µ–ª–∞–µ–º–æ–º—É –ø–æ–ª—É –¥—Ä—É–≥–∏—Ö
      gender: { 
        $in: ['any', ...search.desiredGender] 
      },
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –ø–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∂–µ–ª–∞–µ–º–æ–º—É –ø–æ–ª—É –¥—Ä—É–≥–∏—Ö
      desiredGender: {
        $in: [search.gender, 'any']
      },
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)
      age: { 
        $gte: search.desiredAgeMin,
        $lte: search.desiredAgeMax
      },
      desiredAgeMin: { $lte: search.age },
      desiredAgeMax: { $gte: search.age }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (search.minAcceptableRating > -1) {
      matchCriteria.rating = { $gte: search.minAcceptableRating };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (search.useGeolocation && search.location) {
      matchCriteria.useGeolocation = true;
      matchCriteria.location = {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: search.location.coordinates
          },
          $maxDistance: (search.maxDistance || 10) * 1000 // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–º –≤ –º–µ—Ç—Ä—ã
        }
      };
    }

    return await Search.find(matchCriteria);
  }

  private static selectBestMatch(search: ISearch, matches: ISearch[]): ISearch {
    return matches.reduce((best, current) => {
      const bestScore = this.calculateMatchScore(search, best);
      const currentScore = this.calculateMatchScore(search, current);
      return currentScore > bestScore ? current : best;
    }, matches[0]);
  }

  private static calculateMatchScore(search: ISearch, match: ISearch): number {
    let score = 0;

    // –ë–ª–∏–∑–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ (–º–∞–∫—Å–∏–º—É–º 40 –±–∞–ª–ª–æ–≤)
    const ratingDiff = Math.abs(search.rating - match.rating);
    score += Math.max(0, 40 - ratingDiff * 2);

    // –ë–ª–∏–∑–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤)
    const ageDiff = Math.abs(search.age - match.age);
    score += Math.max(0, 30 - ageDiff * 2);

    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–º–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤)
    if (search.useGeolocation && match.useGeolocation && search.location && match.location) {
      const distance = this.calculateDistance(
        search.location.coordinates,
        match.location.coordinates
      );
      score += Math.max(0, 30 - (distance / 1000)); // distance –≤ –∫–º
    }

    return score;
  }

  private static calculateDistance(coord1: [number, number], coord2: [number, number]): number {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª—ã –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
    const R = 6371e3; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const œÜ1 = (coord1[1] * Math.PI) / 180;
    const œÜ2 = (coord2[1] * Math.PI) / 180;
    const ŒîœÜ = ((coord2[1] - coord1[1]) * Math.PI) / 180;
    const ŒîŒª = ((coord2[0] - coord1[0]) * Math.PI) / 180;

    const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return R * c; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
  }

  private static async createMatch(search1: ISearch & { _id: mongoose.Types.ObjectId }, search2: ISearch & { _id: mongoose.Types.ObjectId }) {
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
    const chat = await Chat.create({
      participants: [search1.userId, search2.userId],
      type: 'anonymous'
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–∏—Å–∫–∞
    await Promise.all([
      Search.findByIdAndUpdate(search1._id, {
        status: 'matched',
        matchedWith: {
          userId: search2.userId,
          telegramId: search2.telegramId,
          chatId: chat._id
        }
      }),
      Search.findByIdAndUpdate(search2._id, {
        status: 'matched',
        matchedWith: {
          userId: search1.userId,
          telegramId: search1.telegramId,
          chatId: chat._id
        }
      })
    ]);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –º—ç—Ç—á–µ
    wsManager.sendToUser(search1.userId.toString(), 'search:matched', {
      matchedUser: {
        telegramId: search2.telegramId,
        chatId: chat._id.toString()
      }
    });

    wsManager.sendToUser(search2.userId.toString(), 'search:matched', {
      matchedUser: {
        telegramId: search1.telegramId,
        chatId: chat._id.toString()
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–º –ø–æ—Å–ª–µ –º–∞—Ç—á–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    await this.updateAndBroadcastStats('match', search1.userId.toString());

    return chat;
  }

  static async getSearchStats() {
    // –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    // wsLogger.info('stats_request', '–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π
    if (this.statsCache && Date.now() - this.statsCache.timestamp < this.CACHE_TTL) {
      // –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      // wsLogger.info('stats_cache_hit', '–í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∫—ç—à–∞', {
      //   cacheAge: Date.now() - this.statsCache.timestamp
      // });
      return this.statsCache.data;
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    // wsLogger.info('stats_cache_miss', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
    const [searchingStats, onlineStats, avgSearchTimeStats] = await Promise.all([
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
      Search.aggregate([
        { $match: { status: 'searching' } },
        {
          $group: {
            _id: '$gender',
            count: { $sum: 1 }
          }
        }
      ]),
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      User.aggregate([
        { 
          $match: { 
            isActive: true,
            lastActive: { 
              $gte: new Date(Date.now() - 30 * 1000) // –∞–∫—Ç–∏–≤–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            }
          }
        },
        {
          $group: {
            _id: '$gender',
            count: { $sum: 1 }
          }
        }
      ]),
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –º—ç—Ç—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
      Search.aggregate([
        { 
          $match: { 
            status: 'matched',
            updatedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
          } 
        },
        {
          $project: {
            searchDuration: { 
              $subtract: ['$updatedAt', '$createdAt'] // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            },
            gender: 1
          }
        },
        {
          $group: {
            _id: '$gender',
            avgTime: { $avg: '$searchDuration' }, // —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –º—Å
            count: { $sum: 1 }
          }
        }
      ])
    ]);

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
    let totalSearchTime = 0;
    let totalSearchCount = 0;
    
    avgSearchTimeStats.forEach(stat => {
      totalSearchTime += (stat.avgTime || 0) * stat.count;
      totalSearchCount += stat.count;
    });
    
    const avgSearchTimeTotal = totalSearchCount > 0 ? 
      Math.round(totalSearchTime / totalSearchCount / 1000) : 0; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    const stats = {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
      t: searchingStats.reduce((sum, stat) => sum + stat.count, 0),
      m: searchingStats.find(s => s._id === 'male')?.count || 0,
      f: searchingStats.find(s => s._id === 'female')?.count || 0,
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω
      online: {
        t: onlineStats.reduce((sum, stat) => sum + stat.count, 0),
        m: onlineStats.find(s => s._id === 'male')?.count || 0,
        f: onlineStats.find(s => s._id === 'female')?.count || 0
      },
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
      avgSearchTime: {
        t: avgSearchTimeTotal,
        m: Math.round((avgSearchTimeStats.find(s => s._id === 'male')?.avgTime || 0) / 1000),
        f: Math.round((avgSearchTimeStats.find(s => s._id === 'female')?.avgTime || 0) / 1000),
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –º—ç—Ç—á–µ–π –∑–∞ 24 —á–∞—Å–∞
        matches24h: totalSearchCount
      }
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    this.statsCache = {
      data: stats,
      timestamp: Date.now()
    };

    // wsLogger.info('stats_updated', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', stats);
    return stats;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –û–±—ä–µ–∫—Ç –ø–æ–∏—Å–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–æ–∏—Å–∫–µ
   */
  static async getUserActiveSearch(userId: string) {
    return await Search.findOne({
      userId: new mongoose.Types.ObjectId(userId),
      status: 'searching'
    });
  }

  public static async broadcastSearchStats() {
    if (this.debounceTimeout) {
      clearTimeout(this.debounceTimeout);
      // wsLogger.info('stats_debounce', '–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–µ–±–∞—É–Ω—Å–∞');
    }
    
    this.debounceTimeout = setTimeout(async () => {
      // wsLogger.info('stats_broadcast_start', '–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      const stats = await this.getSearchStats();
      wsManager.io.to('search_stats_room').emit('search:stats', stats);
      // wsLogger.info('stats_broadcast_complete', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞', {
      //   subscribersCount: wsManager.io.sockets.adapter.rooms.get('search_stats_room')?.size || 0
      // });
    }, this.DEBOUNCE_DELAY);
  }

  /**
   * –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
   * @param action –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ('start', 'cancel', 'match')
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
   */
  private static async updateAndBroadcastStats(action: 'start' | 'cancel' | 'match', userId: string) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    if (this.updatingStats) {
      wsLogger.info('stats_update_queued', `–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (${action}) –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å`, {
        userId,
        action
      });
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º broadcastSearchStats
      this.pendingUpdates = true;
      return;
    }

    try {
      this.updatingStats = true;
      
      let stats;
      
      // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
      if (this.statsCache && Date.now() - this.statsCache.timestamp < this.CACHE_TTL) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ–∂–∏–π –∫—ç—à –∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ
        const userSearch = action === 'start' ? 
          await this.getUserActiveSearch(userId) : null;
          
        if (action === 'start' && userSearch) {
          // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
          const gender = userSearch.gender as 'male' | 'female';
          if (gender === 'male' || gender === 'female') {
            this.statsCache.data.t += 1;
            this.statsCache.data[gender.charAt(0)] += 1;
            stats = { ...this.statsCache.data }; // —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
            wsLogger.info('stats_incremental_update', '–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (–Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞)', { 
              gender, 
              userId 
            });
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.statsCache = null;
            stats = await this.getSearchStats();
          }
        } else if (action === 'cancel') {
          // –î–µ–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º –ø–æ–ª
          const canceledSearch = await Search.findOne({
            userId: new mongoose.Types.ObjectId(userId),
            status: 'cancelled'
          });
          
          if (canceledSearch && (canceledSearch.gender === 'male' || canceledSearch.gender === 'female')) {
            const gender = canceledSearch.gender as 'male' | 'female';
            // –£–º–µ–Ω—å—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—â—É—â–∏—Ö, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ–Ω–ª–∞–π–Ω
            this.statsCache.data.t = Math.max(0, this.statsCache.data.t - 1);
            this.statsCache.data[gender.charAt(0)] = Math.max(0, this.statsCache.data[gender.charAt(0)] - 1);
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            const currentStats = { ...this.statsCache.data }; // —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
            
            // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∫—ç—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            if (!currentStats.online) {
              const freshStats = await this.getSearchStats();
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∏—Å–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–Ω–ª–∞–π–Ω
              this.statsCache = {
                data: {
                  ...freshStats,
                  t: currentStats.t,
                  m: currentStats.m,
                  f: currentStats.f
                },
                timestamp: Date.now()
              };
              stats = this.statsCache.data;
            } else {
              stats = currentStats;
            }
            
            wsLogger.info('stats_incremental_update', '–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (–æ—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞)', { 
              gender, 
              userId 
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.statsCache = null;
            stats = await this.getSearchStats();
          }
        } else if (action === 'match') {
          // –ü—Ä–∏ –º–∞—Ç—á–µ –º—ã –Ω–µ –º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞, –Ω–æ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
          // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          // –ø—Ä–∏ –º–∞—Ç—á–∞—Ö, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ä–µ–¥–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω–æ—Å—Ç—å.
          this.statsCache = null;
          stats = await this.getSearchStats();
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –ø—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          this.statsCache = null;
          stats = await this.getSearchStats();
        }
      } else {
        // –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.statsCache = null;
        stats = await this.getSearchStats();
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å—Ä–∞–∑—É
      wsManager.io.to('search_stats_room').emit('search:stats', stats);
      
      wsLogger.info('stats_force_update', `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è: ${action}`, {
        userId,
        stats,
        fromCache: !!this.statsCache
      });
      
    } catch (error) {
      wsLogger.error('stats_update_error', userId, error as Error, {
        action
      });
    } finally {
      // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      this.updatingStats = false;
      
      // –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
      if (this.pendingUpdates) {
        this.pendingUpdates = false;
        await this.broadcastSearchStats();
      }
    }
  }
  
  // –§–ª–∞–≥–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  private static updatingStats = false;
  private static pendingUpdates = false;
} 